operasi `++`
===> untuk menggabungkan 2 list

operasi `--`
===> untuk menghapus list

```
iex> [1, 2, 3] ++ [4, 5, 6]
[1, 2, 3, 4, 5, 6]
iex> [1, 2, 3] -- [2]
[1, 3]
```

menggabungkan string gunakan  `<>`
```
iex> "foo" <> "bar"
"foobar"
```


`or`, `and`, `not`
hanya menerima boolean.
Tapi mereka adalah short-circuit operators. Artinya, jika argument pertama (disebelah kiri) telah cukup mendapatkan hasil-final, maka argument yang dikanan akan diabaikan.
```
iex> false and raise("This error will never be raised")
false
iex> true or raise("This error will never be raised")
true
```

`||`, `&&`, `!`
semua value akan dianggap true, kecuali `false` dan `nil`
```
# or
iex> 1 || true
1
iex> false || 11
11

# and
iex> nil && 13
nil
iex> true && 17
17

# not
iex> !true
false
iex> !1
false
iex> !nil
true
```


`==`, `!=`, `===`, `!==`, `<=`, `>=`, `<` and `>`
Sama seperti bahasa pemograman lainnya.
untuk `==` hanya akan mengecek kesamaan valuenya.
tetapi untuk `===` juga akan mengecek untuk data type nya.
```
iex> 1 == 1.0
true
iex> 1 === 1.0
false
```


datatype di elixir bisa di bandingkan.
Berikut urutan-urutan data type di Elixir.
```
number, atom, reference, function, port, pid, tuple, map, list, bitstring
```
```
iex> 1 < :atom
true
```

