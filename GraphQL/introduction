- jadi awalnya graphql ini dikembangkan facebook
- masalah yang dihadapi facebook ketika itu adalah
- mereka kesulitan untuk mengambil data komentar yang tiap komentar itu ada komentar lagi didalamnya
- karena tiap komentar ada komentar lagi didalamnya, akibatnya harus bolak balik minta data ke server, jadinya peformanya gak optimal

-- salah satu sumber belajar di howtographql.com

Keuntungan graphql
1. consumer bisa minta data sesuai kebutuhannya, jadi data yang tidak butuh tidak perlu dikirim
-- berbeda dengan restAPI yang mengembalikan data-data seluruhnya, kadang2 data tsb tidak semua dibutuhkan oleh consumer
2. tentu saja data yang di transfer lewat network akan lebih hemat, karena sesuai kebutuhannya saja, ini sangant berpengaruh ke pengguna mobile yang memiliki koneksi terbatas
3. kalo ada front-end beda-beda maka akan repot nyediain banyak endpoint sesuai kebutuhan tiap front-end itu.
-- misal frontend-web minta data A,B,C untuk halaman utama, sedangkan frontend-mobile minta data A,B,D untuk halaman utama
-- itu dari halaman utama saja, kalo misalnya ada banyak halaman, maka akan banyak endpoint-BE yang perlu dibuat untuk memenuhi kebutuhan frontend


Arsitektur penggunaan GraphQL
1. GraphQL langsung berkomuniskasi dengan database ===> ini yang paling gampang
2. GraphQL jadi 'pintu utama' antara client dan seluruh service yang ada
3. GraphQL diterapkan di 1 service, lalu service ini yang akan call service2 lain yang dibutuhkan


CORE CONCEPT
- syntak penulisan schema GraphQL menggunakan SDL (Schema Definition Language) source (prisma.io/blog/graphql-sdl-schema-definition-language-6755bcb9ce51)
- tanda seru "!" artinya required
- [] ===> artinya array

contoh penulisan schema
type Person {
  name: String!
  age: Int!
  posts: [Post!]!
}

type Post {
  title: String!
  author: Person!
}

Contoh Query
{
  allPersons {
    name
  }
}
{
  allPersons(last: 2) {
    name
  }
}

contoh mutation (create, update, delete)
mutation {
  createPerson(name: "Bob", age: 36) {
    id
  }
}


==== Subscription
subscription {
  newPerson {
    name
    age
  }
}


CONTOH PENULISAN Schema
====== basic
type Query { ... }
type Mutation { ... }
type Subscription { ... }

type Query {
  allPersons(last: Int): [Person!]!
  allPosts(last: Int): [Post!]!
}

type Mutation {
  createPerson(name: String!, age: Int!): Person!
  updatePerson(id: ID!, name: String!, age: String!): Person!
  deletePerson(id: ID!): Person!
}

type Subscription {
  newPerson: Person!
}

type Person {
  id: ID!
  name: String!
  age: Int!
  posts: [Post!]!
}

type Post {
  title: String!
  author: Person!
}


### Security
- jadi karena GraphQL ini sangat fleksibel, maka bisa saja disalah gunakan
- Misalnya disalahgunakan oleh para hacker untuk merequest data yang sangat-sangat besar
- Ataupun digunakan oleh client_internal tapi penggunaannya juga sangat besar
- Nah ini bisa saja berakibat server kita down

- Ada beberapa cara untuk mengatasi hal ini, kita akan bahas dari yang termudah
1. Terapkan Timeout
-- misalnya kita terapkan Timeout 5 detik
-- jadi semua request yang kiranya membutuhkan waktu 5 detik, kita anggap itu request yang tidak baik
-- kelebihannya : mudah diterapkan, paling banyak diterapkan
-- kekurangan : memutus koneksi ditengah2 bisa menyebabkan behavior yang ganjil/aneh
-- kekurangan : ya ketika timeoutlah damage nya selesai

2. Terapin maksimal depth/kedalaman Query
- intinya diterapkan maksimal kedalamannya berapa, jadi kalo lewat dari itu ya tolak
- kelebihannya : ya gak perlu proses yang querynya ribet sampe dalem2
- kekurangan : gak semua query berat bisa dihandle oleh ini, misalnya kalo querynya sesuai depth-nya, tapi data yang diminta berat2 ya sama aja

3. Query Complexity
- intinya define sejak awal tiap query mempunyai nilai berapa untuk Complexity
- karena query A dan query B bisa saja mempunyai comlexitas berbeda, sehingga cara nomor 2 tidak selalu efektif
-- kelebihan : cover lebih banyak case yang dihandle instead of cara nomor 2 | query lebih cepat dideteksi sebagai query yang tidak baik
-- kekurangan : sulit untuk menetapkan Complexity dengan sempurna

